------------- STM32CubeIDE with CubeMX setup --------------------

Create a new STM32CubeIDE project with the specific mcu, 
    use CubeMx to setup with 
    led gpio
    uart @ 4Mb/s
    HSE crystal and PLL for max clock frequency
    time base using TIM1
    save and generate code. 

if using stlink openocd :
Add Makefile with openocd targets for flashing debug and release configuration 
binaries and minicom serial console with the baud rate as above

Test build and flashing of code with toggling led, printing to uart

Under project folder, create a new folder /ThirdParty
Under /ThirdParty, create a new folder /FreeRTOS 
Here you can add other modules like graphics, lwIP etc
Under /FreeRTOS create a new folder /org (needed for compatibility with Segger SystemView)

----------- Integrating FreeRTOS --------------------------------------------------

Download freertos from freertos.org and unzip the archive
We don't need the /FreeRTOS-Plus subdirectory

From FreeRTOS archive copy the folder /FreeRTOS/Source to the project /org directory
From FreeRTOS archive copy the folder /FreeRTOS/License to the project /org directory

In /org/source/portable, delete all items except /GCC, /MemMang and readme.txt

In /MemMang, delete all items except heap_4.c and README.url

In /GCC, delete all except your MCU-specific directory e.g. /ARM_CM4F 
This has a file port.c which has the cpu dependent code for FreeRTOS
 
 Go to STM32CubeIDE and refresh project to show the ThirdParty folder and check the tree
 
 Click on ThirdParty, menu Properties -> C/C++ build, uncheck "exclude resource from build"

On project properties, C/c++ build - > settings, Tool Settings, MCU GCC Compiler,
Include paths
    add workspace  your project ThirdParty/FreeRTOS/org/Source/include
    add workspace  your project ThirdParty/FreeRTOS/org/Source/portable/GCC/ARM-CM4F
    
Create a new /Config project subdirectory    
Goto archive FreeRTOS/Demo, search for a mcu compatible project, eg.
CORTEX_M4F_STM32F407ZG-SK and copy FreeRTOSConfig.h to /Config
In project click on /Config, Properties - uncheck "exclude resource from build" 
Add /Config path to the project GCC compiler include path

Edit FreeRTOSConfig.h 
Copy  'extern  uint32_t SystemCoreClock' to outside
the #ifdef __ICCARM__, otherwise it will not be declared to the compiler

Set
#define configUSE_TICK_HOOK             0
#define configCHECK_FOR_STACK_OVERFLOW	0
#define configUSE_MALLOC_FAILED_HOOK	0

or you will  get undefined references to vApplicationTickHook, etc.

Edit project stm32f4xx_it.c 
comment out SV_Handler, PendSV_Handler and SysTickHandler as they
are defined in FreeRTOS ... port.c

Test build and run of your code blinking led and printing to uart

----------------------- Test with internal RC oscillator ---------------------------

To test using default power-on  clock using HSI internal oscillator, even if you
have the external clock and pll already defined using CubeMx, 
add couple of lines of code

/* Configure the system clock */
SystemClock_Config();

/* USER CODE BEGIN SysInit */ // Add these two lines of code
HAL_RCC_DeInit(); // 16 MHz HSI
SystemCoreClockUpdate();

/* USER CODE END SysInit */

------------------- Ubuntu 20.04 OpenOCD GDB debugging --------------------------------------

To run debugger from STM32CubeIDE using gdb with openocd

For error regarding gdb-version and libncurses, do this in /usr/lib

sudo ln -s libncursesw.so.6.1 libncurses.so.5
sudo ln -s libncursesw.so.6.1 libtinfo.so.5

sudo apt-get install libncurses5

In project settings, goto debug, then under Debugger tab
select autostart local gdb server
Debug probe = STLink (Stlink GDB Server)  NOTE : for semihosting enable, see below
    Interface SWD
    Access port 0-Cortex-M4
    rest defaults

--------------- ARM Semihosting on STM32CubeIDE --------------------------
For printf through SWD interface (slow), no need for UART initialization
 
1. Add Linker arguments

-specs=rdimon.specs -lc -lrdimon

to Project-Properties-C/C++Build-Linker-Miscellaneous (otherflags)

2. Project - Debug As - Debug Configuration - select IDE <project> Debug - Startup
paste below 
    monitor arm semihosting enable
in initialization commands textbox

3. in main.c add
extern void initialize_monitor_handles();

initialise_monitor_handles(); // add this before any printf statements

4. Click on project syscalls.c, properties - exclude Resource from build to avoid
multiple function definition error

5. Project - Debug As - Debug Configurations
IDE < project> Debug
    Debugger
    Select Autostart local GDB Server
    Debug Probe ST-Link (OpenOCD)
     openocd commmand = /usr/bin/openocd
     openocd options = -f /usr/local/share/openocd/scripts/interface/stlink-v2.cfg
     
    Configuration script
    First select Automated Generation, apply, then copy the generated script to
    another file with a different name, e.g. freertos_udemy_myDebug.cfg and 
    edit it so that the line is now
        reset_config srst_nogate connect_assert_srst
    The change is required to avoid connection error "target not halted".
    Now go back to Configuration Script and select User defined and select the edited
    script. The auto generated script is always regenerated on build so any changes
    will be lost. 
    
    Note semihosting only works when Debug Probe is set to STLINK Openocd.
    Semihosting does not work with STlink GDB Server, results in error 
    not able to execute the initialization command
    "monitor arm semihosting enable "
    
---------------------------------------------------------
SWO trace 

1. in cubemx, ensure SYS -> Debug is set to 'Asychronous Trace' so that SWO, SWD and SWCLK
pins are assigned alternate function (green)

2. in main.c redefine  _write function or __io_putchar() so that
 printf is redirected to ITM module. Add only one of these.
 
int _write(int file, char* szMsg, int len) {
	for (int inx = 0; inx < len; inx++){
		ITM_SendChar(*szMsg++);
	    }
	return len;
    }
-OR-
int __io_putchar(int ch) {
	ITM_SendChar(ch);
	return ch;
    }    

3. add #include <stdio.h> 
4. in cube ide  project - debug - configuration - Debugger
  select STLink GDB Server, enable Serial Wire Viewer, set the mcu clock to match with actual mcu
  clock set in project
5. Flash the cpu, when the debugger is halted in main, 
 go to Window - View - enable SWV ITM Data Console window.
Click on settings icon,  enable channel 0
Click on record icon (red circle) to start trace.   
Click on resume / step and you will see printf outputs on the ITM console window.
Click on record icon to stop tracing; 

----------------------------------------------------------
SWO trace using JLink
If you see error unable to connect under reset, connect both reset pin and SWO pin
from JLink.

SWO trace using STLink v2 clone
Isolate interface connector pin #9 from 5V supply (cut the pcb trace next to the pin). 
Don't damage pin#10 connection to 5V supply !
Connect STM32F103 pin 31 (PA10) via 22ohm to connector pin #9.


